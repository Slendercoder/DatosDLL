df_RS <- df_RS[df_RS$RegionGo != 'IN', ]
df_RS <- df_RS[df_RS$RegionGo != 'OUT', ]
head(df_RS)
gRS <- ggplot() +
geom_point(aes(x = FRASim, y = Freqs, color=RegionGo), df_RS, alpha = 0.5, size=1.5) +
scale_x_continuous(limits = c(0, 1.01)) +
scale_y_continuous(limits = c(0, 1.01)) +
xlab("FRASim to RIGHT") +
#  ylab("") +
ylab("Rel. Freq./Probability") +
ggtitle("Transitions from RS") +
scale_colour_manual(values = c("RS" = "#999999", "RIGHT" = "#E69F00")) +
theme_bw()
gRS
xs <- seq(0,1.2,length.out=1000)
# Transition from RS to RS
# Model fitted
fitEST <- sapply(xs, ModelProb, regionFrom='RS', regionGo='RS', k='RIGHT', theta=theta, regiones=regiones)
dfmodels <- data.frame(xs, fitEST)
head(dfmodels)
ModelProb <- function(regionFrom, regionGo, s, k, theta, regiones){
# FRA model returns probability of going from regionFrom to regionGo
# given FRA similarity to region k
wALL <- theta[1]
wNOTHING <- theta[2]
wLEFT <- theta[3]
wIN <- theta[4]
alpha <- theta[5]
beta <- theta[6]
gamma <- theta[7]
aux <- c(wALL, wNOTHING, wLEFT, wLEFT, wLEFT, wLEFT, wIN, wIN)
# The probability of region 'RS' is 1 - the sum of the other probabilities
if (sum(aux) > 1) {
aux <- aux/sum(aux)
}
bias <- c(1 - sum(aux), aux)
# print('bias')
# imprimir(bias)
# Find the attractivenes:
focal <- 0
index <- which(regiones == regionGo) + 1
attractiveness <- bias[index]
if (regionFrom == 'RS') {
if (regionGo != 'RS') {
if(k == regionGo) {
attractiveness <- attractiveness + alpha * sigmoid(s, beta, gamma)
}
}
} else {
if(regionFrom == regionGo) {
attractiveness <- attractiveness + alpha
focal <- alpha
}
if(k == regionGo) {
attractiveness <- attractiveness + alpha * sigmoid(s, beta, gamma)
focal <- alpha
}
}
probab <- attractiveness / (1 + alpha * sigmoid(s, beta, gamma) + focal)
return(probab)
} # end ModelProb
# Estimated parameters:
theta <- c(0.035, 0.048, 0.003, 0.001, 176.88, 23.042, 1.152) # FRA
regiones <- c('RS',
'ALL',
'NOTHING',
'DOWN',
'UP',
'LEFT',
'RIGHT',
'IN',
'OUT')
df1 = read.csv("../Python Codes/fraFreqs-humans.csv", na.strings=c("","NA"))
#df1 = read.csv("../Python Codes/fraFreqs-simulated.csv", na.strings=c("","NA"))
df1$Region <- df1$Category
df1 <- df1[complete.cases(df1), ]
df1 <- df1[c('Region', 'FRASim', 'RegionGo')]
head(df1)
dfA <- df1
dfA$Freqs <- apply(dfA, 1, function(x) {
i <- x[[1]][1]
s <- x[[2]][1]
k <- x[[3]][1]
#  cat('\ni', i, 's', s, 'k', k, '\n')
#  print(x)
return(getRelFreqFRA(i, s, k, dfA))
})
dfA <- unique(dfA)
dfA <- dfA[complete.cases(dfA), ]
head(dfA)
df <- dfA
beep()
df_RS <- df[df$Region == 'RS', ]
#df_RS <- df_RS[df_RS$RegionGo != 'RS', ]
df_RS <- df_RS[df_RS$RegionGo != 'ALL', ]
df_RS <- df_RS[df_RS$RegionGo != 'NOTHING', ]
df_RS <- df_RS[df_RS$RegionGo != 'DOWN', ]
df_RS <- df_RS[df_RS$RegionGo != 'UP', ]
df_RS <- df_RS[df_RS$RegionGo != 'LEFT', ]
#df_RS <- df_RS[df_RS$RegionGo != 'RIGHT', ]
df_RS <- df_RS[df_RS$RegionGo != 'IN', ]
df_RS <- df_RS[df_RS$RegionGo != 'OUT', ]
head(df_RS)
gRS <- ggplot() +
geom_point(aes(x = FRASim, y = Freqs, color=RegionGo), df_RS, alpha = 0.5, size=1.5) +
scale_x_continuous(limits = c(0, 1.01)) +
scale_y_continuous(limits = c(0, 1.01)) +
xlab("FRASim to RIGHT") +
#  ylab("") +
ylab("Rel. Freq./Probability") +
ggtitle("Transitions from RS") +
scale_colour_manual(values = c("RS" = "#999999", "RIGHT" = "#E69F00")) +
theme_bw()
gRS
xs <- seq(0,1.2,length.out=1000)
# Transition from RS to RS
# Model fitted
fitEST <- sapply(xs, ModelProb, regionFrom='RS', regionGo='RS', k='RIGHT', theta=theta, regiones=regiones)
dfmodels <- data.frame(xs, fitEST)
head(dfmodels)
# Size of models' lines
tamanho <- 0.5
gRS2RS <- gRS +
geom_line(aes(x = xs, y = fitEST), dfmodels, size = tamanho, color="#999999") +
scale_x_continuous(limits = c(0, 1.01)) +
scale_y_continuous(limits = c(0, 1.01)) +
theme_bw()
gRS2RS
dfA$Freqs <- apply(dfA, 1, function(x) {
i <- x[[1]][1]
s <- x[[2]][1]
k <- x[[3]][1]
#  cat('\ni', i, 's', s, 'k', k, '\n')
#  print(x)
return(getRelFreqFRA(i, s, k, dfA))
})
dfA <- unique(dfA)
# Transition from RS to RIGHT
# Model fitted
fitEST <- sapply(xs, ModelProb, regionFrom='RS', regionGo='RIGHT', k='RIGHT', theta=theta, regiones=regiones)
dfmodels <- data.frame(xs, fitEST)
head(dfmodels)
gRS2RIGHT <- gRS2RS +
geom_line(aes(x = xs, y = fitEST), dfmodels, size = tamanho, color="#E69F00") +
scale_x_continuous(limits = c(0, 1.01)) +
scale_y_continuous(limits = c(0, 1.01)) +
theme_bw()
gRS2RIGHT
grid.arrange(gRS2RIGHT,
nrow = 1,
right=legend,
bottom="Points: data     Lines: Model",
top="FRA model of transitions")
# Transition from RS to RS
# Model fitted
fitEST <- sapply(xs, ModelProb, regionFrom='RS', regionGo='RS', k='RIGHT', theta=theta, regiones=regiones)
dfmodels <- data.frame(xs, fitEST)
head(dfmodels)
ModelProb('RS', 'RS', 0.1, 'RIGHT', theta, regiones)
ModelProb <- function(regionFrom, regionGo, s, k, theta, regiones){
# FRA model returns probability of going from regionFrom to regionGo
# given FRA similarity to region k
wALL <- theta[1]
wNOTHING <- theta[2]
wLEFT <- theta[3]
wIN <- theta[4]
alpha <- theta[5]
beta <- theta[6]
gamma <- theta[7]
aux <- c(wALL, wNOTHING, wLEFT, wLEFT, wLEFT, wLEFT, wIN, wIN)
# The probability of region 'RS' is 1 - the sum of the other probabilities
if (sum(aux) > 1) {
aux <- aux/sum(aux)
}
bias <- c(1 - sum(aux), aux)
print('bias')
imprimir(bias)
# Find the attractivenes:
focal <- 0
index <- which(regiones == regionGo) + 1
attractiveness <- bias[index]
if (regionFrom == 'RS') {
if (regionGo != 'RS') {
if(k == regionGo) {
attractiveness <- attractiveness + alpha * sigmoid(s, beta, gamma)
}
}
} else {
if(regionFrom == regionGo) {
attractiveness <- attractiveness + alpha
focal <- alpha
}
if(k == regionGo) {
attractiveness <- attractiveness + alpha * sigmoid(s, beta, gamma)
focal <- alpha
}
}
probab <- attractiveness / (1 + alpha * sigmoid(s, beta, gamma) + focal)
return(probab)
} # end ModelProb
ModelProb('RS', 'RS', 0.1, 'RIGHT', theta, regiones)
ModelProb <- function(regionFrom, regionGo, s, k, theta, regiones){
# FRA model returns probability of going from regionFrom to regionGo
# given FRA similarity to region k
wALL <- theta[1]
wNOTHING <- theta[2]
wLEFT <- theta[3]
wIN <- theta[4]
alpha <- theta[5]
beta <- theta[6]
gamma <- theta[7]
aux <- c(wALL, wNOTHING, wLEFT, wLEFT, wLEFT, wLEFT, wIN, wIN)
# The probability of region 'RS' is 1 - the sum of the other probabilities
if (sum(aux) > 1) {
aux <- aux/sum(aux)
}
bias <- c(1 - sum(aux), aux)
print('bias')
imprimir(bias)
# Find the attractivenes:
focal <- 0
index <- which(regiones == regionGo)
attractiveness <- bias[index]
if (regionFrom == 'RS') {
if (regionGo != 'RS') {
if(k == regionGo) {
attractiveness <- attractiveness + alpha * sigmoid(s, beta, gamma)
}
}
} else {
if(regionFrom == regionGo) {
attractiveness <- attractiveness + alpha
focal <- alpha
}
if(k == regionGo) {
attractiveness <- attractiveness + alpha * sigmoid(s, beta, gamma)
focal <- alpha
}
}
probab <- attractiveness / (1 + alpha * sigmoid(s, beta, gamma) + focal)
return(probab)
} # end ModelProb
ModelProb('RS', 'RS', 0.1, 'RIGHT', theta, regiones)
a <- ModelProb('RS', 'RS', 0.1, 'RIGHT', theta, regiones)
a
gRS <- ggplot() +
geom_point(aes(x = FRASim, y = Freqs, color=RegionGo), df_RS, alpha = 0.5, size=1.5) +
scale_x_continuous(limits = c(0, 1.01)) +
scale_y_continuous(limits = c(0, 1.01)) +
xlab("FRASim to RIGHT") +
#  ylab("") +
ylab("Rel. Freq./Probability") +
ggtitle("Transitions from RS") +
scale_colour_manual(values = c("RS" = "#999999", "RIGHT" = "#E69F00")) +
theme_bw()
gRS
xs <- seq(0,1.2,length.out=1000)
# Transition from RS to RS
# Model fitted
fitEST <- sapply(xs, ModelProb, regionFrom='RS', regionGo='RS', k='RIGHT', theta=theta, regiones=regiones)
dfmodels <- data.frame(xs, fitEST)
head(dfmodels)
# Size of models' lines
tamanho <- 0.5
gRS2RS <- gRS +
geom_line(aes(x = xs, y = fitEST), dfmodels, size = tamanho, color="#999999") +
scale_x_continuous(limits = c(0, 1.01)) +
scale_y_continuous(limits = c(0, 1.01)) +
theme_bw()
gRS2RS
ModelProb <- function(regionFrom, regionGo, s, k, theta, regiones){
# FRA model returns probability of going from regionFrom to regionGo
# given FRA similarity to region k
wALL <- theta[1]
wNOTHING <- theta[2]
wLEFT <- theta[3]
wIN <- theta[4]
alpha <- theta[5]
beta <- theta[6]
gamma <- theta[7]
aux <- c(wALL, wNOTHING, wLEFT, wLEFT, wLEFT, wLEFT, wIN, wIN)
# The probability of region 'RS' is 1 - the sum of the other probabilities
if (sum(aux) > 1) {
aux <- aux/sum(aux)
}
bias <- c(1 - sum(aux), aux)
# print('bias')
# imprimir(bias)
# Find the attractivenes:
focal <- 0
index <- which(regiones == regionGo)
attractiveness <- bias[index]
if (regionFrom == 'RS') {
if (regionGo != 'RS') {
if(k == regionGo) {
attractiveness <- attractiveness + alpha * sigmoid(s, beta, gamma)
}
}
} else {
if(regionFrom == regionGo) {
attractiveness <- attractiveness + alpha
focal <- alpha
}
if(k == regionGo) {
attractiveness <- attractiveness + alpha * sigmoid(s, beta, gamma)
focal <- alpha
}
}
probab <- attractiveness / (1 + alpha * sigmoid(s, beta, gamma) + focal)
return(probab)
} # end ModelProb
gRS <- ggplot() +
geom_point(aes(x = FRASim, y = Freqs, color=RegionGo), df_RS, alpha = 0.5, size=1.5) +
scale_x_continuous(limits = c(0, 1.01)) +
scale_y_continuous(limits = c(0, 1.01)) +
xlab("FRASim to RIGHT") +
#  ylab("") +
ylab("Rel. Freq./Probability") +
ggtitle("Transitions from RS") +
scale_colour_manual(values = c("RS" = "#999999", "RIGHT" = "#E69F00")) +
theme_bw()
gRS
xs <- seq(0,1.2,length.out=1000)
# Transition from RS to RS
# Model fitted
fitEST <- sapply(xs, ModelProb, regionFrom='RS', regionGo='RS', k='RIGHT', theta=theta, regiones=regiones)
dfmodels <- data.frame(xs, fitEST)
head(dfmodels)
# Size of models' lines
tamanho <- 0.5
gRS2RS <- gRS +
geom_line(aes(x = xs, y = fitEST), dfmodels, size = tamanho, color="#999999") +
scale_x_continuous(limits = c(0, 1.01)) +
scale_y_continuous(limits = c(0, 1.01)) +
theme_bw()
gRS2RS
# Transition from RS to RIGHT
# Model fitted
fitEST <- sapply(xs, ModelProb, regionFrom='RS', regionGo='RIGHT', k='RIGHT', theta=theta, regiones=regiones)
dfmodels <- data.frame(xs, fitEST)
head(dfmodels)
gRS2RIGHT <- gRS2RS +
geom_line(aes(x = xs, y = fitEST), dfmodels, size = tamanho, color="#E69F00") +
scale_x_continuous(limits = c(0, 1.01)) +
scale_y_continuous(limits = c(0, 1.01)) +
theme_bw()
gRS2RIGHT
library(ggplot2)
library(Rmisc)
library(dplyr)
library(gridExtra)
get_legend<-function(myggplot){
tmp <- ggplot_gtable(ggplot_build(myggplot))
leg <- which(sapply(tmp$grobs, function(x) x$name) == "guide-box")
legend <- tmp$grobs[[leg]]
return(legend)
} # end get_legend
dfCalificacionGroup = read.csv('calificacion_group.csv')
dfCalificacionGroup$Exp <- as.character('Pairs')
head(dfCalificacionGroup)
dfCalificacionSingle = read.csv('calificacion_single.csv')
dfCalificacionSingle$Exp <- as.character('Single')
head(dfCalificacionSingle)
dfCalificacion <- rbind(
dfCalificacionGroup[c(
'Player',
'Kind',
'GradingA',
'GradingB',
'GradingC',
'GradingD',
'Exp')
],
dfCalificacionSingle[c(
'Player',
'Kind',
'GradingA',
'GradingB',
'GradingC',
'GradingD',
'Exp')
]
)
dfCalificacionGroup = read.csv('calificacion_group.csv')
setwd("~/DatosDLL/12-16-18-23-27-sept-2019/Analysis")
dfCalificacionGroup = read.csv('calificacion_group.csv')
dfCalificacionGroup$Exp <- as.character('Pairs')
head(dfCalificacionGroup)
dfCalificacionSingle = read.csv('calificacion_single.csv')
dfCalificacionSingle$Exp <- as.character('Single')
head(dfCalificacionSingle)
dfCalificacion <- rbind(
dfCalificacionGroup[c(
'Player',
'Kind',
'GradingA',
'GradingB',
'GradingC',
'GradingD',
'Exp')
],
dfCalificacionSingle[c(
'Player',
'Kind',
'GradingA',
'GradingB',
'GradingC',
'GradingD',
'Exp')
]
)
calificacion_summary <- dfCalificacion %>% # the names of the new data frame and the data frame to be summarised
group_by(Exp, Kind) %>%   # the grouping variable
summarise(mean_PL = mean(GradingA),  # calculates the mean of each group
sd_PL = sd(GradingA), # calculates the standard deviation of each group
n_PL = n(),  # calculates the sample size per group
SE_PL = sd(GradingA)/sqrt(n())) # calculates the standard error of each group
gA <- ggplot(calificacion_summary, aes(Kind, group=Exp, fill=Exp)) +
geom_col(aes(y=mean_PL), position="dodge") +
geom_errorbar(aes(ymin = mean_PL - sd_PL, ymax = mean_PL + sd_PL),
size=0.3,
width=0.2,
position=position_dodge(.9)) +
ylim(c(0,8)) +
ggtitle("Cairn Terrier") +
labs(y="Confidence in understanding",
x = "Expertise",
fill = "Condition") +
theme_classic()
gA
calificacion_summary <- dfCalificacion %>% # the names of the new data frame and the data frame to be summarised
group_by(Exp, Kind) %>%   # the grouping variable
summarise(mean_PL = mean(GradingA),  # calculates the mean of each group
sd_PL = sd(GradingA), # calculates the standard deviation of each group
n_PL = n(),  # calculates the sample size per group
SE_PL = sd(GradingA)/sqrt(n())) # calculates the standard error of each group
dfCalificacion
calificacion_summary <- dfCalificacion %>% # the names of the new data frame and the data frame to be summarised
group_by(Exp, Kind) %>%   # the grouping variable
summarise(mean_PL = mean(GradingA),  # calculates the mean of each group
sd_PL = sd(GradingA), # calculates the standard deviation of each group
n_PL = n(),  # calculates the sample size per group
SE_PL = sd(GradingA)/sqrt(n())) # calculates the standard error of each group
library(dplyr)
calificacion_summary <- dfCalificacion %>% # the names of the new data frame and the data frame to be summarised
group_by(Exp, Kind) %>%   # the grouping variable
summarise(mean_PL = mean(GradingA),  # calculates the mean of each group
sd_PL = sd(GradingA), # calculates the standard deviation of each group
n_PL = n(),  # calculates the sample size per group
SE_PL = sd(GradingA)/sqrt(n())) # calculates the standard error of each group
calificacion_summary <- dfCalificacion %>% # the names of the new data frame and the data frame to be summarised
group_by(Exp, Kind) %>%   # the grouping variable
summarise(mean_PL = mean(GradingA),  # calculates the mean of each group
sd_PL = sd(GradingA), # calculates the standard deviation of each group
n_PL = n())#,  # calculates the sample size per group
calificacion_summary <- dfCalificacion %>% # the names of the new data frame and the data frame to be summarised
group_by(Exp, Kind) %>%   # the grouping variable
summarise(mean_PL = mean(GradingA),  # calculates the mean of each group
sd_PL = sd(GradingA), # calculates the standard deviation of each group
n_PL = n(),  # calculates the sample size per group
SE_PL = sd(GradingA)/sqrt(n())) # calculates the standard error of each group
calificacion_summary <- dfCalificacion %>% # the names of the new data frame and the data frame to be summarised
group_by(Exp, Kind) %>%   # the grouping variable
summarise(mean_PL = mean(GradingA),  # calculates the mean of each group
sd_PL = sd(GradingA))#, # calculates the standard deviation of each group
gA <- ggplot(calificacion_summary, aes(Kind, group=Exp, fill=Exp)) +
geom_col(aes(y=mean_PL), position="dodge") +
geom_errorbar(aes(ymin = mean_PL - sd_PL, ymax = mean_PL + sd_PL),
size=0.3,
width=0.2,
position=position_dodge(.9)) +
ylim(c(0,8)) +
ggtitle("Cairn Terrier") +
labs(y="Confidence in understanding",
x = "Expertise",
fill = "Condition") +
theme_classic()
gA
dfCalificacionGroup = read.csv('calificacion_group.csv')
dfCalificacionGroup$Exp <- as.character('Pairs')
head(dfCalificacionGroup)
dfCalificacionSingle = read.csv('calificacion_single.csv')
dfCalificacionSingle$Exp <- as.character('Single')
head(dfCalificacionSingle)
dfCalificacion <- rbind(
dfCalificacionGroup[c(
'Player',
'Kind',
'GradingA',
'GradingB',
'GradingC',
'GradingD',
'Exp')
],
dfCalificacionSingle[c(
'Player',
'Kind',
'GradingA',
'GradingB',
'GradingC',
'GradingD',
'Exp')
]
)
head(dfCalificacion)
calificacion_summary <- dfCalificacion %>% # the names of the new data frame and the data frame to be summarised
group_by(Exp, Kind) %>%   # the grouping variable
summarise(mean_PL = mean(GradingA),  # calculates the mean of each group
sd_PL = sd(GradingA), # calculates the standard deviation of each group
n_PL = n(),  # calculates the sample size per group
SE_PL = sd(GradingA)/sqrt(n())) # calculates the standard error of each group
dfCalificacion
